NAMEREG s3, led_stat
CONSTANT led_port, 00
NAMEREG s4, counter


LOAD counter, 5'd
led1_on_i: LOAD led_stat,01
         OUTPUT led_stat, led_port
		 CALL delay_150ms
		 SUB counter, 1'd
		 JUMP NZ, led1_on_i
		 LOAD counter, 5'd 
		 
led2_on_i: LOAD led_stat,03
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,02
         OUTPUT led_stat, led_port
	     CALL delay_100ms
		 SUB counter, 1'd
		 JUMP NZ, led2_on_i
		 LOAD counter, 5'd 

led3_on_i: LOAD led_stat,07
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,06
         OUTPUT led_stat, led_port
	     CALL delay_50ms
		 LOAD led_stat,04
         OUTPUT led_stat, led_port
		 CALL delay_50ms
		 SUB counter, 1'd
		 JUMP NZ, led3_on_i
		 LOAD counter, 5'd

led4_on_i: LOAD led_stat,0E
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,0C
         OUTPUT led_stat, led_port
	     CALL delay_50ms
		 LOAD led_stat,08
         OUTPUT led_stat, led_port
		 CALL delay_50ms
		 SUB counter, 1'd
		 JUMP NZ, led4_on_i
		 LOAD counter, 5'd

led4_on_g: LOAD led_stat,08
         OUTPUT led_stat, led_port
		 CALL delay_150ms
		 SUB counter, 1'd
		 JUMP NZ, led4_on_g
		 LOAD counter, 5'd

led3_on_g: LOAD led_stat,0C
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,04
         OUTPUT led_stat, led_port
	     CALL delay_100ms
		 SUB counter, 1'd
		 JUMP NZ, led3_on_g
		 LOAD counter, 5'd

led2_on_g: LOAD led_stat,0E
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,06
         OUTPUT led_stat, led_port
	     CALL delay_50ms
		 LOAD led_stat,02
         OUTPUT led_stat, led_port
		 CALL delay_50ms
		 SUB counter, 1'd
		 JUMP NZ, led2_on_g
		 LOAD counter, 5'd

led1_on_g: LOAD led_stat,07
         OUTPUT led_stat, led_port
		 CALL delay_50ms		 
		 LOAD led_stat,03
         OUTPUT led_stat, led_port
	     CALL delay_50ms
		 LOAD led_stat,01
         OUTPUT led_stat, led_port
		 CALL delay_50ms
		 SUB counter, 1'd
		 JUMP NZ, led1_on_g
		 LOAD counter, 5'd 		 

JUMP led1_on_i

delay_50ms:   LOAD s2, 5'd   ;0.25sn
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN
		
delay_100ms:   LOAD s2, 10   ;0.25sn
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN
		
delay_150ms:   LOAD s2, 15   ;0.25sn
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN
				
delay_500ms:   LOAD s2, 50   ;0.5sn
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN
				
delay_750ms:   LOAD s2, 75   ;0.75sn
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN

delay_1000ms:   LOAD s2, 98   ;1s
                LOAD s1, 96
                LOAD s0, 80
				CALL software_delay
                ;
                ; The delay loop decrements [s2,s1,s0] until it reaches zero
                ; Each decrement cycle is 5 instructions which is 10 clock cycles (100ns at 100MHz)
                RETURN

software_delay: LOAD s0, s0             ;pad loop to make it 10 clock cycles (5 instructions)
                SUB s0, 1'd
                SUBCY s1, 0'd
                SUBCY s2, 0'd
                JUMP NZ, software_delay
                RETURN